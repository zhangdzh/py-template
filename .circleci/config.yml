version: 2.1

jobs:
  backend:
    docker:
      - image: cimg/python:3.8  # Use Python image for backend
    
    environment:
      CI: "false"

    steps:
      - checkout  # Checkout the source code

      # Set up Python with PDM
      - run:
          name: Set up Python with PDM
          command: |
            python -m pip install --upgrade pip
            pip install pdm
            pdm config python.use_venv true

      # Install default + development dependencies for backend
      - run:
          name: Install backend dependencies
          command: pdm install -d

      # Run tests with pytest
      - run:
          name: Run backend tests
          command: pdm run pytest source/tests

      # Run Flake8 for backend linting
      # - run:
      #     name: Lint backend with Flake8
      #     command: pdm run flake8 source

      # Run Black for backend formatting
      # - run:
      #     name: Apply backend Black formatting
      #     command: pdm run black .

      # Deploy backend to Heroku
      - run:
          name: Deploy backend to Heroku
          command: |
            git remote add heroku https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git
            git push heroku main

  frontend:
    docker:
      - image: cimg/node:18.18.2  
    
    environment:
      CI: "false"

    steps:
      - checkout  # Checkout the source code

      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version  # Verify AWS CLI installation

      - run:
          name: Install frontend dependencies
          command: npm install --force
          working_directory: source/frontend  # Navigate to frontend folder

      - run:
          name: Build frontend
          command: npm run build
          working_directory: source/frontend

      - run:
          name: Upload frontend to S3
          command: |
            aws configure set aws_access_key_id $ACCESS_KEY
            aws configure set aws_secret_access_key $SECRET_KEY
            aws s3 sync build/ s3://leafeon  # Upload build artifacts to S3
          working_directory: source/frontend

workflows:
  version: 2
  build:
    jobs:
      - backend
      - frontend
